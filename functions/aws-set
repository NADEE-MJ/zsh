# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo "jq is not installed. Please install it first."
    return 1
fi

# Check if a file path is provided
if [ "$#" -ne 1 ]; then
    JSON_FILE="$(pwd)/.temp_aws_credentials.json"
else
    JSON_FILE="$1"
fi

# Ensure the path is absolute
if [[ ! "$JSON_FILE" = /* ]]; then
    echo "Please provide an absolute path to the JSON file."
    return 1
fi

# Check if file exists
if [[ ! -f "$JSON_FILE" ]]; then
    echo "File does not exist at the specified path $JSON_FILE"
    return 1
fi

# Extract expiration timestamp from the JSON file
EXPIRATION=$(jq -r '.Credentials.Expiration' "$JSON_FILE")
CURRENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
TIME_DIFFERENCE_HOURS=$(echo "($(date -d "$EXPIRATION" +%s) - $(date -d "$CURRENT_TIME" +%s)) / 3600" | bc)

# Check if timestamp is over 12 hours old
if (( TIME_DIFFERENCE_HOURS < -12 )); then
    echo "The credentials in the file are over 12 hours old. Please create a new file."
    return 1
fi

# Extract credentials and set as environment variables
export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' "$JSON_FILE")
export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' "$JSON_FILE")
export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' "$JSON_FILE")

# Print out to verify
echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
echo "AWS_SECRET_ACCESS_KEY: [hidden]"
echo "AWS_SESSION_TOKEN: [hidden]"
